deployApp("D:/Master/Study/R课/ma415_R_hw05_hongyi_alicia_glib/Assignment 5")
deployApp("D:/Master/Study/R课/ma415_R_hw05_hongyi_alicia_glib/Assignment 5")
runApp('shiny_U80494546_Hongyi He.R')
deployApp("D:/Master/Study/R课/ma415_R_hw05_hongyi_alicia_glib/Assignment 5")
install.packages("yaml")
deployApp("D:/Master/Study/R课/ma415_R_hw05_hongyi_alicia_glib/Assignment 5")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(rsconnect)
deployApp("D:/Master/Study/R课/ma415_R_hw05_hongyi_alicia_glib/Assignment 5")
install.packages("yamlData")
install.packages("yaml")
deployApp("D:/Master/Study/R课/ma415_R_hw05_hongyi_alicia_glib/Assignment 5")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(rsconnect)
deployApp("D:/Master/Study/R课/ma415_R_hw05_hongyi_alicia_glib/Assignment 5")
install.packages("utf8")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(rsconnect)
deployApp("D:/Master/Study/R课/ma415_R_hw05_hongyi_alicia_glib/Assignment 5")
library(utf8)
deployApp("D:/Master/Study/R课/ma415_R_hw05_hongyi_alicia_glib/Assignment 5")
library(tidycensus)
library(tidyverse)
install.packages("tidycenses")
install.packages("tidycensus")
census_api_key("abc33d293cba72f268789c96bbbba25a9d6705a6", install = TRUE)
library(tidycensus)
census_api_key("abc33d293cba72f268789c96bbbba25a9d6705a6", install = TRUE)
M90 <- get_decennial(geography = "state",
variables = "H043A001",
year = 1990)
library(tidycensus)
library(tidyverse)
census_api_key("abc33d293cba72f268789c96bbbba25a9d6705a6", install = TRUE)
M90 <- get_decennial(geography = "state",
variables = "H043A001",
year = 1990)
M90
census_api_key("abc33d293cba72f268789c96bbbba25a9d6705a6", install = TRUE)
M90 <- get_decennial(geography = "state",
variables = "H043A001",
year = 1990)
census_api_key("abc33d293cba72f268789c96bbbba25a9d6705a6", install = TRUE)
census_api_key("abc33d293cba72f268789c96bbbba25a9d6705a6", overwrite = TRUE)
census_api_key("4a9be5059488fa8496ce494f1aab12ea1c0db98f", overwrite = TRUE,install=T)
readRenviron("~/.Renviron")
`readRenviron("~/.Renviron")`
M90 <- get_decennial(geography = "state",
variables = "H043A001",
year = 1990)
tox1 <- read_csv("tox1.csv")
library(tidyverse)
ex9 <- read_csv("ex9.csv")
tox1 <- read_csv("tox1.csv")
tox1 <- subset(tox1[,-1])
tox1
data <- as.data.frame(tox1)
rownames(data) <- data[,1]
ggplot(data,mapping=aes(x = Name, y=`Values for LD50 on rats`))+
geom_bar(stat="identity", position="dodge",aes(fill=Name))+
coord_flip()+
labs(y = "Values(mg/kg)",x = "Chemical Name")
tox <- read_csv("chemical_tox_shiny")
tox <- read_csv("chemical_tox_shiny.csv")
tox
tox <- subset(tox[,-1])
tox
tox <- tox %>% select(-X1)
tox <- tox %>% select(-X1)
tox <- tox %>% select(-1)
tox
tox <- read_csv("chemical_tox_shiny.csv")
tox <- tox %>% select(-1)
tox
# Define UI for application that draws a histogram
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Temperature", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Vegetable", tabName = "widgets", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
fluidRow(
box(
title = "Select the range of year",
status="success",
solidHeader = TRUE,
sliderInput("max",
label = "Range of year:",
min = 1987, max = 2017, value = c(2016,2017)),
hr(),
radioButtons("Type", "Type of temperature:",
c("Air Temperature" = 'ATMP',
"Water Temperature" = 'WTMP')),
hr(),
helpText("Data from the NOAA.")
),
tabBox(
title = "Berling Sea Temperature",
id = "tabset1",
side = "left",
height = "250px",
selected = "Daily air temperature",
tabPanel("Daily",
status="success",
plotOutput("graph")),
tabPanel("Yearly",
status="success",
plotOutput("graph2")),
tabPanel("Regression line",
status="success",
plotOutput("graph3")
)
)
)
),
tabItem(tabName = "widgets",
fluidRow(
box(
selectInput("a", "Choose a commodity:",choices = c(2006,2010,2014,2016)),
selectInput("b", "Choose a commodity:",choices = c("BROCCOLI","CAULIFLOWER"))
),
tabBox(
tabpanel("Chemcials of vegetable",
status = "success",
solidHeader = TRUE,
plotOutput("graph4"),
hr(),
helpText("Data from EPA"),
verbatimTextOutput("dateText")
),
tabpanel("Toxic chemcials of vegetable",
status = "success",
solidHeader = TRUE,
plotOutput("graph5"),
hr(),
helptext("Data from EPA")
)
)
)
)
)
)
)
server <- function(input, output) {
a <- reactive({
filter(data, YYYY>input$max[1]) %>% filter(YYYY<input$max[2]) %>% filter(hh==12)
})
b <- reactive({
filter(data_avg, YYYY>input$max[1]) %>% filter(YYYY<input$max[2])
})
c <- reactive({
filter(data_h, YYYY>input$max[1]) %>% filter(YYYY<input$max[2])
})
d <- reactive({
filter(data_veg, Year==input$a) %>% filter(Commodity == input$b)
})
output$graph <- renderPlot({
if(input$Type=="ATMP"){
ggplot(a(), aes(x = Time)) +
geom_line(aes(y = ATMP), colour="green", size = 0.5) +
ylab(label="Celsius degrees") +
xlab("Time")
}else if(input$Type=="WTMP"){
ggplot(a(), aes(x = Time)) +
geom_line(aes(y = WTMP), colour="green", size = 0.5) +
ylab(label="Celsius degrees") +
xlab("Time")
}
})
output$graph2 <- renderPlot({
if(input$Type=="ATMP"){
ggplot(b(), aes(x = YYYY)) +
geom_smooth(aes(y = avg_atmp), colour="blue", size = 0.5) +
ylab(label="Celsius degrees") +
xlab("Time")
}else if(input$Type=="WTMP"){
ggplot(b(), aes(x = YYYY)) +
geom_smooth(aes(y = avg_wtmp), colour="blue", size = 0.5) +
ylab(label="Celsius degrees") +
xlab("Time")
}
})
output$graph3 <- renderPlot({
if(input$Type=="ATMP"){
ggplot(a(),aes(x=Time,y=ATMP))+
geom_point()+geom_smooth(method="lm")+
ggtitle("reg ATMP")
}else if(input$Type=="WTMP"){
ggplot(a(),aes(x=Time,y=WTMP))+
geom_point()+
geom_smooth(method="lm")+
ggtitle("reg WTMP")
}
})
output$graph4 <- renderPlot({
ggplot(d(), mapping=aes(x= Name, y=Value )) +
geom_bar(stat="identity", position="dodge",aes(fill=Name)) +
coord_flip()+
labs(y = "Values(LB) ",x = "Chemical Name")
})
output$plot2 <- renderPlot({
data <- as.data.frame(tox1)
rownames(data) <- data[,1]
ggplot(data,mapping=aes(x = Name, y=`Values for LD50 on rats`))+
geom_bar(stat="identity", position="dodge",aes(fill=Name))+
coord_flip()+
labs(y = "Values(mg/kg)",x = "Chemical Name")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(tidyverse)
library(zoo)
library(shiny)
library(shinydashboard)
library(rsconnect)
runApp('shiny_U80494546_Hongyi He.R')
runApp('shiny_U80494546_Hongyi He.R')
runApp('shiny_U80494546_Hongyi He.R')
runApp('shiny_U80494546_Hongyi He.R')
# Define UI for application that draws a histogram
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Temperature", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Vegetable", tabName = "widgets", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
fluidRow(
box(
title = "Select the range of year",
status="success",
solidHeader = TRUE,
sliderInput("max",
label = "Range of year:",
min = 1987, max = 2017, value = c(2016,2017)),
hr(),
radioButtons("Type", "Type of temperature:",
c("Air Temperature" = 'ATMP',
"Water Temperature" = 'WTMP')),
hr(),
helpText("Data from the NOAA.")
),
tabBox(
title = "Berling Sea Temperature",
id = "tabset1",
side = "left",
height = "250px",
selected = "Daily air temperature",
tabPanel("Daily",
status="success",
plotOutput("graph")),
tabPanel("Yearly",
status="success",
plotOutput("graph2")),
tabPanel("Regression line",
status="success",
plotOutput("graph3")
)
)
)
),
tabItem(tabName = "widgets",
fluidRow(
box(
selectInput("a", "Choose a commodity:",choices = c(2006,2010,2014,2016)),
selectInput("b", "Choose a commodity:",choices = c("BROCCOLI","CAULIFLOWER"))
),
tabBox(
tabPanel("Chemcials of vegetable",
status = "success",
solidHeader = TRUE,
plotOutput("graph4"),
hr(),
helpText("Data from EPA"),
verbatimTextOutput("dateText")
),
tabPanel("Toxicity of Chemcials",
status = "success",
solidHeader = TRUE,
plotOutput("graph5"),
hr(),
helpText("Data from EPA")
)
)
)
)
)
)
)
server <- function(input, output) {
a <- reactive({
filter(data, YYYY>input$max[1]) %>% filter(YYYY<input$max[2]) %>% filter(hh==12)
})
b <- reactive({
filter(data_avg, YYYY>input$max[1]) %>% filter(YYYY<input$max[2])
})
c <- reactive({
filter(data_h, YYYY>input$max[1]) %>% filter(YYYY<input$max[2])
})
d <- reactive({
filter(data_veg, Year==input$a) %>% filter(Commodity == input$b)
})
output$graph <- renderPlot({
if(input$Type=="ATMP"){
ggplot(a(), aes(x = Time)) +
geom_line(aes(y = ATMP), colour="green", size = 0.5) +
ylab(label="Celsius degrees") +
xlab("Time")
}else if(input$Type=="WTMP"){
ggplot(a(), aes(x = Time)) +
geom_line(aes(y = WTMP), colour="green", size = 0.5) +
ylab(label="Celsius degrees") +
xlab("Time")
}
})
output$graph2 <- renderPlot({
if(input$Type=="ATMP"){
ggplot(b(), aes(x = YYYY)) +
geom_smooth(aes(y = avg_atmp), colour="blue", size = 0.5) +
ylab(label="Celsius degrees") +
xlab("Time")
}else if(input$Type=="WTMP"){
ggplot(b(), aes(x = YYYY)) +
geom_smooth(aes(y = avg_wtmp), colour="blue", size = 0.5) +
ylab(label="Celsius degrees") +
xlab("Time")
}
})
output$graph3 <- renderPlot({
if(input$Type=="ATMP"){
ggplot(a(),aes(x=Time,y=ATMP))+
geom_point()+geom_smooth(method="lm")+
ggtitle("reg ATMP")
}else if(input$Type=="WTMP"){
ggplot(a(),aes(x=Time,y=WTMP))+
geom_point()+
geom_smooth(method="lm")+
ggtitle("reg WTMP")
}
})
output$graph4 <- renderPlot({
ggplot(d(), mapping=aes(x= Name, y=Value )) +
geom_bar(stat="identity", position="dodge",aes(fill=Name)) +
coord_flip()+
labs(y = "Values(LB) ",x = "Chemical Name")
})
output$graph5 <- renderPlot({
data <- as.data.frame(tox1)
rownames(data) <- data[,1]
ggplot(data,mapping=aes(x = Name, y=`Values for LD50 on rats`))+
geom_bar(stat="identity", position="dodge",aes(fill=Name))+
coord_flip()+
labs(y = "Values(mg/kg)",x = "Chemical Name")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('shiny_U80494546_Hongyi He.R')
library(tidyverse)
library(readxl)
library(stringr)
library(ggplot2)
veg.1 <- read_xlsx("veg1.xlsx")
cnames.1 <- colnames(veg.1)
## try
n_distinct(veg.1[,1])
n_distinct(veg.1[,2])
c <- apply(veg.1, 2, n_distinct)
d <- names(c[c==1])
e <- names(c[c>1])
veg.2 <- select(veg.1, e)
cnames.2 <- colnames(veg.2)
apply(veg.2, 2, n_distinct)
veg.3 <- dplyr::rename(veg.2,
Geo = `Geo Level`,
State = `State ANSI`,
Data = `Data Item`,
Category = `Domain Category`)
cnames.3 <- colnames(veg.3)
unique(veg.3[,"Commodity"])
unique(veg.3[,"Data"]) %>% print(n=60)
unique(veg.3[,"Domain"])
unique(veg.3[,"Category"])
unique(veg.3[,"Value"])
veg_data <- separate(veg.3, Category, into = c("label", "quant"), sep=",")
#
n_distinct(veg_data[,2])
#
#
unique(veg_data[,"label"]) %>% print(n=30)
ru <- filter(veg_data, label=="RESTRICTED USE CHEMICAL")
ru1 <- ru %>% select(label, quant) %>% unique()
ru2 <- ru1 %>% select(-label) %>%
separate(quant, into = c("a", "ID"), sep = "=") %>%
separate(a, into = c("D", "Name"), sep = "[()]") %>%
select(-D) %>%
separate(ID, into = c("ID", "D1"), sep = "[)]") %>%
select(-D1)
ru1 %>% print(n=30)
################################################
veg_data$quant
veg_data1 <- separate(veg_data, quant, into=c("Treat","Name"), sep = ":")
veg_data2 <- veg_data1 %>% filter(!Value %in% c("(D)",NA,"(Z)","(NA)"))
veg_data2 <- veg_data2 %>% select(-Domain)
veg_data2 <- veg_data2 %>% separate(Data, into = c("a", "Measurement"), sep = "-")
veg_data2 <- veg_data2 %>% select(-a)
veg_data2 <- veg_data2 %>% separate(Measurement, into = c("Measurement", "Unit of Measurement"), sep = ",")
veg_data3 <- veg_data2 %>% separate(Name, into = c("a", "ID"), sep = "=") %>%
separate(a, into = c("D", "Name"), sep = "[()]") %>%
select(-D) %>%
separate(ID, into = c("ID", "D1"), sep = "[)]") %>%
select(-D1)
#save the data
write.csv(veg_data3 ,"veg_data3.csv",row.names = FALSE)
write.csv(ru2, "chemical.csv",row.names=F)
veg_data3$Value <- as.numeric(veg_data3$Value)
#get the data with toxicity info in it
chemical_tox <- read.csv("chemical_tox.csv")
chemical_tox <- as.tibble(chemical_tox)
chemical_tox$X <- as.integer(chemical_tox$X)
chemical_tox$Name <- as.character(chemical_tox$Name)
chemical_tox$ID <- as.character(chemical_tox$ID)
chemical_tox <- chemical_tox %>% select(-ID)
#brocoli
broc <- veg_data3 %>% filter(label == "RESTRICTED USE CHEMICAL", Commodity == "BROCCOLI", `Unit of Measurement`==" MEASURED IN LB")
broc$Value <- as.numeric(broc$Value)
broc <- left_join(broc,chemical_tox,by="Name")
broc <- rename(broc,Real=Value,LD50=X)
broc <- broc %>% gather(Real , LD50 , key="Toxicity", value="value")
ggplot(broc, aes(x= Name, y=value )) +
geom_bar(stat="identity",position = "dodge",aes(fill=Toxicity)) +
labs(y = "Values(LB) ",x = "Chemical Name") +
coord_flip()+
labs(title="LD50(mg/kg) and Real content(lb) of Brocoli")
write.csv(broc ,"broc.csv",row.names = FALSE)
ggplot(broc, aes(x= Name, y=value )) +
geom_bar(stat="identity",position = "dodge",aes(fill=Toxicity)) +
labs(y = "Values(LB) ",x = "Chemical Name") +
coord_flip()+
labs(title="LD50(mg/kg) and Real content(lb) of Brocoli")
Caul <- veg_data3 %>% filter(label == "RESTRICTED USE CHEMICAL", Commodity == "CAULIFLOWER", `Unit of Measurement`==" MEASURED IN LB")
Caul$Value <- as.numeric(Caul$Value)
Caul <- left_join(Caul,chemical_tox,by="Name")
Caul <- rename(Caul,Real=Value,LD50=X)
Caul <- Caul %>% gather(Real , LD50 , key="Toxicity", value="value")
write.csv(Caul ,"Caul.csv",row.names = FALSE)
#plot the Cauliflower
ggplot(Caul, aes(x= Name, y=value )) +
geom_bar(stat="identity",position = "dodge",aes(fill=Toxicity)) +
labs(y = "Values(LB) ",x = "Chemical Name") +
coord_flip()+
labs(title="LD50(mg/kg) and Real content(lb) of Cauliflower")
broc <- read_csv("broc.csv")
Caul <- read_csv("Caul.csv")
broc
Caul
e <- reative({
if(input$b=="CAULIFLOWER"){
filter(Caul, Year==input$a)
}else{
filter(broc, Year==input$a)
}
})
library(shiny); runApp('shiny_U80494546_Hongyi He.R')
runApp('shiny_U80494546_Hongyi He.R')
broc
runApp('shiny_U80494546_Hongyi He.R')
ggplot(broc, aes(x= Name, y=value )) +
geom_bar(stat="identity",position = "dodge",aes(fill=Toxicity)) +
labs(y = "Values(LB) ",x = "Chemical Name") +
coord_flip()+
labs(title=paste("LD50(mg/kg) and Real content(lb) of",input$b))
ggplot(broc, aes(x= Name, y=value )) +
geom_bar(stat="identity",position = "dodge",aes(fill=Toxicity)) +
labs(y = "Values(LB) ",x = "Chemical Name") +
coord_flip()+
labs(title="LD50(mg/kg) and Real content(lb) of")
runApp('shiny_U80494546_Hongyi He.R')
broc
runApp('shiny_U80494546_Hongyi He.R')
runApp('shiny_U80494546_Hongyi He.R')
